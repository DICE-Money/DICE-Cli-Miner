{
  "stats": {
    "suites": 1,
    "tests": 27,
    "passes": 27,
    "pending": 0,
    "failures": 0,
    "start": "2018-05-31T18:20:36.980Z",
    "end": "2018-05-31T18:22:13.775Z",
    "duration": 96795,
    "testsRegistered": 27,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "349ddc1a-6eb8-4633-9dde-488631d9e5b4",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "fbbdc013-8e9e-4c8a-afb1-ffaf16340822",
        "title": "General functional tests",
        "fullFile": "C:\\Development\\NodeJS\\EncryptionNodeJS\\Apps\\Miner\\test\\functional-test\\generalTestBinary.js",
        "file": "\\generalTestBinary.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "General functional tests \"before all\" hook",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "modFs.readdirSync('./units/').forEach(file => {\n    modFs.unlinkSync(`./units/${file}`);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "de3a8b1f-1729-4c7b-9283-db6f43b187b6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Check is operator Valid",
            "fullTitle": "General functional tests Check is operator Valid",
            "timedOut": false,
            "duration": 621,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var operatorExecutor = child_process.execFileSync(operatorApp,[\"-ver\"], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = operatorExecutor.toString();\nif (data.length === 0) {\n    throw new Error(\"Operator application is not valid\");\n}",
            "err": {},
            "isRoot": false,
            "uuid": "1370d1e8-7e20-4511-bee5-5edacfd1161d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -ver",
            "fullTitle": "General functional tests Check properly executon of -ver",
            "timedOut": false,
            "duration": 574,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-ver\\\"],\\\"expected\\\":\\\"Copyright (c) 2018, Mihail Maldzhanski <pollarize@gmail.com>\\\\nDICE Money <www.dice.money> - Miner Application Version[1.48] - 30.05.2018\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"Copyright (c) 2018, Mihail Maldzhanski <pollarize@gmail.com>\\nDICE Money <www.dice.money> - Miner Application Version[1.48] - 30.05.2018\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "39edb80d-3a2e-4f09-b0ad-11b29fb8d9c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -h",
            "fullTitle": "General functional tests Check properly executon of -h",
            "timedOut": false,
            "duration": 661,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-h\\\"],\\\"expected\\\":\\\"Copyright (c) 2018, Mihail Maldzhanski <pollarize@gmail.com>\\\\nDICE Money <www.dice.money> - Miner Application Version[1.48] - 30.05.2018\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\\nCopyright (c) 2018, Mihail Maldzhanski <pollarize@gmail.com>\\nDICE Money <www.dice.money> - Miner Application Version[1.48] - 30.05.2018\\n\\n  -cCfg,--createConfiguration\\n     Create Configuration of the current owner.\\n     Usage: <application> <-cCfg or --createConfiguration> <nameOfOwner> <keyPair> <configurationFile>\\n\\n  -uCfg,--updateConfiguration\\n     Update Configuration of the current owner.(Do not delete existing contacts and operators!)\\n     Usage: <application> <-uCfg or --updateConfiguration> <nameOfOwner> <keyPair> <configurationFile>\\n\\n  -iCfg,--importConfiguration\\n     Import external configration file.\\n     Usage: <application> <-iCfg or --importConfiguration> <externalConfigurationFile> <configurationFile>\\n\\n  -aC,--addContact\\n     Add new Contact in configuration file.\\n     Usage: <application> <-aC or --addContact> <nameOfContact> <digitalAddrOfContact> <configurationFile>\\n\\n  -aO,--addOperator\\n     Add new Operator in configration file.\\n     Usage: <application> <-aO or --addOperator> <nameOfOperator> <digitalAddrOfOperator> <configurationFile>\\n\\n  -eAc,--exportAllContacts\\n     Export all Contacts from local configuration file.\\n     Usage: <application> <-eAc or --exportAllContacts> <externalConfigurationFile> <configurationFile>\\n\\n  -eAo,--exportAllOperators\\n     Export all Operators from local configration file.\\n     Usage: <application> <-eAo or --exportAllOperators> <externalConfigurationFile> <configurationFile>\\n\\n  -lO,--listOperators\\n     List all Operators in confgiration file.\\n     Usage: <application> <-lO or --listOperators> <configurationFile>\\n\\n  -lC,--listContacts\\n     List all Contacts in confgiration file.\\n     Usage: <application> <-lC or --listContacts> <configurationFile>\\n\\n  -eK,--exportKeys\\n     Export keys saved in configuration file.\\n     Usage: <application> <-eK or --exportKeys> <fileOutput> <configurationFile>\\n\\n  -pD,--printDigitalAddress\\n     Print Digital Address from configuration file.\\n     Usage: <application> <-pD or --printDigitalAddress> <configurationFile>\\n\\n  -pN,--printName\\n     Print Name from configuration file.\\n     Usage: <application> <-pN or --printName> <configurationFile>\\n\\n  -lGO,--listGlobalOperators\\n     List all Global Operators.\\n     Usage: <application> <-lGO or --listGlobalOperators> <>\\n\\n  -uDns,--updateDnsBinder\\n     Downaload latest version of dns binder file.\\n     Usage: <application> <-uDns or --updateDnsBinder> <>\\n\\n  -b,--balance\\n     Calculate current balance of DICE in specified folder.\\n     Usage: <application> <-b or --balance> <folderWithUnits> <keyPair>\\n\\n  -lU,--listUnits\\n     List all units in specific folder with current value, owner and operator.\\n     Usage: <application> <-lU or --listUnits> <folderWithUnits> <keyPair>\\n\\n  -v,--validate\\n     Exports content from Base58 saved unit and value of the unit\\n     Usage: <application> <-v or --validate> <diceUnit> <keyPair>\\n\\n  -k,--keygen\\n     Generate new KeyPair of Digital Address and Private Key\\n     Usage: <application> <-k or --keygen> <fileOutput>\\n\\n  -to,--tradeOwnerless\\n     Trade ownerless dice unit\\n     Usage: <application> <-to or --tradeOwnerless> <diceUnit> <keyPair>\\n\\n  -tc,--tradeCurrent\\n     Trade current owner of unit \\n     Usage: <application> <-tc or --tradeCurrent> <diceUnit> <fileOutput> <addrMin> <keyPair>\\n\\n  -tn,--tradeNew\\n     Trade request from new owner (for ownerless unit or traded unit)\\n     Usage: <application> <-tn or --tradeNew> <diceUnit> <fileOutput> <keyPair>\\n\\n  -cc,--calculateCuda\\n     Calculate new DICE Unit by using CUDA accelerated application\\n     Usage: <application> <-cc or --calculateCuda> <fileOutput> <addrOp> <specificUnitValue> <keyPair>\\n\\n  -r,--register\\n     Send prototype to operator to register it in its DB.\\n     Usage: <application> <-r or --register> <diceUnit> <keyPair>\\n\\n  -ver,--version\\n     Prints application current version\\n     Usage: <application> <-ver or --version> <>\\n\\n  -h,--help\\n     Print Following list\\n     Usage: <application> <-h or --help> <>\\n\\n\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0157cfcf-5585-4295-9a08-3da79012657e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -uDns",
            "fullTitle": "General functional tests Check properly executon of -uDns",
            "timedOut": false,
            "duration": 1471,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-uDns\\\"],\\\"expected\\\":\\\"UsInf0089\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0089\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e272b844-bf04-42e7-a26e-60f20ba56bb7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -lGO",
            "fullTitle": "General functional tests Check properly executon of -lGO",
            "timedOut": false,
            "duration": 618,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-lGO\\\"],\\\"expected\\\":\\\"UsInf0054\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"1. d8f54-4fe68-98060-78b6d-bbbf3-1908b-473de-ed2b2 - Orange Pi Zero - Allwinner H2+ - 256MB RAM - 4GB ROM\\n2. 11f18-19ec1-b4e42-c96de-906fc-86fd6-d64e4-ed409 - Neo Pi Neo Plus 2 - Allwinner H5(64 bit) - 1024MB RAM - 8GB ROM - Sofia\\n3. 58b4b-cfd09-290eb-0ad2f-c6077-c2f0d-fa940-0f4d4 - Neo Pi Neo Plus 2 - Allwinner H5(64 bit) - 1024MB RAM - 8GB ROM - London\\n4. 76640-bcfe5-47604-75a2e-c0a6c-90df2-c39ef-97718 - undefined\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "345a0837-c5cf-4284-882f-8277b9bc1dcb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -k",
            "fullTitle": "General functional tests Check properly executon of -k",
            "timedOut": false,
            "duration": 608,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-k\\\",\\\"testKey\\\"],\\\"expected\\\":\\\"UsInf0053\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0053\\nUsInf0059  :  2YRJZN7bns8vjUSjzYq2bmD4CN4C\\nUsInf0060  :  9520f-36127-f4ec5-22808-5d787-8c331-2ad27-8181a\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e3930f69-107d-40d6-acb8-4fbce63ffc31",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -cCfg",
            "fullTitle": "General functional tests Check properly executon of -cCfg",
            "timedOut": false,
            "duration": 557,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-cCfg\\\",\\\"Mihail Maldzhanski\\\",\\\"testkey.dkeys\\\",\\\"testCfg\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ad29ec78-5baa-4e3e-a868-ae5d438b62af",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -uCfg",
            "fullTitle": "General functional tests Check properly executon of -uCfg",
            "timedOut": false,
            "duration": 575,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-uCfg\\\",\\\"Mihail Maldzhanski New\\\",\\\"testkey.dkeys\\\",\\\"testCfg\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0e34930e-6ae8-4539-bc4c-27ea50b51352",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -iCfg",
            "fullTitle": "General functional tests Check properly executon of -iCfg",
            "timedOut": false,
            "duration": 549,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-iCfg\\\",\\\"../../contactsInit.dbook\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fb763c85-3651-48f8-bede-21bb590720f6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -aC",
            "fullTitle": "General functional tests Check properly executon of -aC",
            "timedOut": false,
            "duration": 562,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-aC\\\",\\\"Tester Name\\\",\\\"3f2b9-2f458-f2066-26c65-ea67c-a6b48-86ced-e9dc6\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "494766fd-0d0f-40a7-9297-352a6ea2729a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -aO",
            "fullTitle": "General functional tests Check properly executon of -aO",
            "timedOut": false,
            "duration": 556,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-aO\\\",\\\"Tester Operator\\\",\\\"3f2b9-2f458-f2066-26c65-ea67c-a6b48-86ced-e9dc6\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "451a5d12-a811-49fa-8b16-a9519bf788f4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -lO",
            "fullTitle": "General functional tests Check properly executon of -lO",
            "timedOut": false,
            "duration": 573,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-lO\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"Name: OpiZero Digital Address: d8f54-4fe68-98060-78b6d-bbbf3-1908b-473de-ed2b2 \\nName: NeoPiPlus2 Digital Address: 11f18-19ec1-b4e42-c96de-906fc-86fd6-d64e4-ed409 \\nName: Tester Operator Digital Address: 3f2b9-2f458-f2066-26c65-ea67c-a6b48-86ced-e9dc6 \\n\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "70273224-e43a-4d71-b33f-2f924fa3c8a7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -lC",
            "fullTitle": "General functional tests Check properly executon of -lC",
            "timedOut": false,
            "duration": 552,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-lC\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"Name: Mihail Maldzhanski Digital Address: f87b0-31850-b97f9-835c9-9cb13-f91ce-43832-8537c \\nName: Tester Name Digital Address: 3f2b9-2f458-f2066-26c65-ea67c-a6b48-86ced-e9dc6 \\n\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "f2bf8c2a-4e02-4a06-84e3-3b7322241618",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -pN",
            "fullTitle": "General functional tests Check properly executon of -pN",
            "timedOut": false,
            "duration": 572,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-pN\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"Mihail Maldzhanski New\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b06dce11-5877-492b-a980-00386db5c9fe",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -pD",
            "fullTitle": "General functional tests Check properly executon of -pD",
            "timedOut": false,
            "duration": 552,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-pD\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"9520f-36127-f4ec5-22808-5d787-8c331-2ad27-8181a\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b0ab5d82-4a55-4612-8ab2-b1f014438a8c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -eAc",
            "fullTitle": "General functional tests Check properly executon of -eAc",
            "timedOut": false,
            "duration": 560,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-eAc\\\",\\\"exportedContacts\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "902411bc-f7a4-4f37-a9c2-6d5f4f253a9b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -eAo",
            "fullTitle": "General functional tests Check properly executon of -eAo",
            "timedOut": false,
            "duration": 569,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-eAo\\\",\\\"exportedOperators\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "cdede961-46e8-46ab-b096-8df412e2e143",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -eK",
            "fullTitle": "General functional tests Check properly executon of -eK",
            "timedOut": false,
            "duration": 613,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-eK\\\",\\\"exportedKeys\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6a675a4a-be69-4593-a49b-e0467b193324",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -cc",
            "fullTitle": "General functional tests Check properly executon of -cc",
            "timedOut": false,
            "duration": 80070,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-cc\\\",\\\"./units/testUnit\\\",\\\"76640-bcfe5-47604-75a2e-c0a6c-90df2-c39ef-97718\\\"],\\\"expected\\\":\\\"UsInf0073\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0056  :  30\\nCUDA Devices: \\r\\n\\r\\nNBody.GPU\\r\\n=========\\r\\n\\r\\n\\nCUDA version:   v9000\\r\\n\\n0: GeForce GTX 1050: 6.1\\r\\n  Global memory:   4096mb\\r\\n  Shared memory:   48kb\\r\\n  Constant memory: 64kb\\r\\n  Block registers: 65536\\r\\n\\r\\n  Warp size:         32\\r\\n  Threads per block: 1024\\r\\n  Multiprocessors: 5\\r\\n  Threads per multiprocessor: 2048\\r\\n  Concurrent kernels: 1\\r\\n  Max block dimensions: [ 1024, 1024, 64 ]\\r\\n  Max grid dimensions:  [ 2147483647, 65535, 65535 ]\\r\\n\\n\\r\\n\\nCUDA DICE Calculator has been started\\r\\nBlocks: 5120 Threads per block: 64 Total Threads: 327680 \\r\\nOperations per second: 14745600 / s\\r\\nEstimated time for generation (max): 72 s\\r\\n\\nUsInf0065  :  79181\\nTime used: 79 s\\r\\n\\nUsInf0052  :  1/1024\\nUsInf0057  :  ./units/testUnit\\nUsInf0067\\nUsInf0068  :  UsInf0073\\nUsInf0069  :  9520f-36127-f4ec5-22808-5d787-8c331-2ad27-8181a\\nUsInf0070  :  1/1024\\nUsInf0071  :  b660d4d18391d3bda537046f633e57d7984406f85a1508ed888c829d96f1d91e07d5a59c3acaea3f65fdecd3aacfe1243f06171d75e7487405dd157740000000\\nUsInf0072\\nUsInf0071  :  b660d4d18391d3bda537046f633e57d7984406f85a1508ed888c829d96f1d91e07d5a59c3acaea3f65fdecd3aacfe1243f06171d75e7487405dd157740000000\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "01b0a232-edb8-4d8e-935d-1df51b9dd26c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -v",
            "fullTitle": "General functional tests Check properly executon of -v",
            "timedOut": false,
            "duration": 740,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-v\\\",\\\"./units/testUnit.dice\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0061\\nUsInf0062  :  76640bcfe54760475a2ec0a6c90df2c39ef97718\\nUsInf0063  :  9520f36127f4ec5228085d7878c3312ad278181a\\nUsInf0064  :  1e\\nUsInf0065  :  00610ad6\\nUsInf0066  :  896b03c9d229dac588b27c5f346f7a943d2d2f53f2bf33677696419783ef0af71b912cd3583f6baba97ac50d3aff8b3d01273789869eedb0d1707ae8c16289f68c7c99e782e6add594451b969f06fbaaaa7cf7\\nUsInf0052  :  1/1024\\nUsInf0071  :  b660d4d18391d3bda537046f633e57d7984406f85a1508ed888c829d96f1d91e07d5a59c3acaea3f65fdecd3aacfe1243f06171d75e7487405dd157740000000\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "2814f0d4-44ae-40c5-919a-12bbc6b93a73",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -to",
            "fullTitle": "General functional tests Check properly executon of -to",
            "timedOut": false,
            "duration": 766,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-to\\\",\\\"./units/testUnit.dice\\\"],\\\"expected\\\":\\\"UsInf0075\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0067\\nUsInf0068  :  UsInf0075\\nUsInf0069  :  \\nUsInf0070  :  1/1024\\nUsInf0071  :  b660d4d18391d3bda537046f633e57d7984406f85a1508ed888c829d96f1d91e07d5a59c3acaea3f65fdecd3aacfe1243f06171d75e7487405dd157740000000\\nUsInf0072\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e31a0252-9c50-4533-b0c1-b751f47c9a98",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -r",
            "fullTitle": "General functional tests Check properly executon of -r",
            "timedOut": false,
            "duration": 781,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-r\\\",\\\"./units/testUnit.dice\\\"],\\\"expected\\\":\\\"Warn0028\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0052  :  1/1024\\nUsInf0067\\nUsInf0068  :  Warn0028\\nUsInf0069  :  \\nUsInf0070  :  1/1024\\nUsInf0071  :  b660d4d18391d3bda537046f633e57d7984406f85a1508ed888c829d96f1d91e07d5a59c3acaea3f65fdecd3aacfe1243f06171d75e7487405dd157740000000\\nUsInf0072\\nUsInf0071  :  b660d4d18391d3bda537046f633e57d7984406f85a1508ed888c829d96f1d91e07d5a59c3acaea3f65fdecd3aacfe1243f06171d75e7487405dd157740000000\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "918f6195-1383-4159-8baf-c5bb910596d4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -tn",
            "fullTitle": "General functional tests Check properly executon of -tn",
            "timedOut": false,
            "duration": 744,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-tn\\\",\\\"./units/testUnit.dice\\\",\\\"./units/testUnit.dice\\\"],\\\"expected\\\":\\\"UsInf0076\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0067\\nUsInf0068  :  UsInf0076\\nUsInf0069  :  9520f-36127-f4ec5-22808-5d787-8c331-2ad27-8181a\\nUsInf0070  :  1/1024\\nUsInf0071  :  b660d4d18391d3bda537046f633e57d7984406f85a1508ed888c829d96f1d91e07d5a59c3acaea3f65fdecd3aacfe1243f06171d75e7487405dd157740000000\\nUsInf0072\\nUsInf0057  :  ./units/testUnit.dice\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "56f87984-52c9-493b-a267-7947fe9682a0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -b",
            "fullTitle": "General functional tests Check properly executon of -b",
            "timedOut": false,
            "duration": 724,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-b\\\",\\\"./units/\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0090  :  0.001953125\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "db824da5-8581-4078-8677-c89106732845",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -lU",
            "fullTitle": "General functional tests Check properly executon of -lU",
            "timedOut": false,
            "duration": 772,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-lU\\\",\\\"./units/\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"1 # ./units//testUnit.dice # 76640-bcfe5-47604-75a2e-c0a6c-90df2-c39ef-97718 # 9520f-36127-f4ec5-22808-5d787-8c331-2ad27-8181a # 0.0009765625\\n2 # ./units//testUnit.dice.dice # 76640-bcfe5-47604-75a2e-c0a6c-90df2-c39ef-97718 # 9520f-36127-f4ec5-22808-5d787-8c331-2ad27-8181a # 0.0009765625\\nUsInf0090  :  0.001953125\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ce574cdc-3e20-44e0-bf66-cc7bced921c2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -tc",
            "fullTitle": "General functional tests Check properly executon of -tc",
            "timedOut": false,
            "duration": 773,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-tc\\\",\\\"./units/testUnit.dice\\\",\\\"./units/encrypted\\\",\\\"d8f54-4fe68-98060-78b6d-bbbf3-1908b-473de-ed2b2\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0067\\nUsInf0068  :  UsInf0075\\nUsInf0069  :  9520f-36127-f4ec5-22808-5d787-8c331-2ad27-8181a\\nUsInf0070  :  1/1024\\nUsInf0071  :  b660d4d18391d3bda537046f633e57d7984406f85a1508ed888c829d96f1d91e07d5a59c3acaea3f65fdecd3aacfe1243f06171d75e7487405dd157740000000\\nUsInf0072\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "c8a7bf77-166f-468e-b341-18c3195d1a5f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check is all commands covert",
            "fullTitle": "General functional tests Check is all commands covert",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var covert = [];\nvar unCovert = [];\nvar duplicated = [];\nfor (let command of commands) {\n    for (let test of generalTest) {\n        if (command.args[0] === test.args[0]) {\n            if (covert.indexOf(command.args[0]) === -1) {\n                covert.push(command.args[0]);\n            } else {\n                duplicated.push(command.args[0]);\n            }\n        }\n    }\n    if (unCovert.indexOf(command.args[0]) === -1 &&\n            covert.indexOf(command.args[0]) === -1) {\n        unCovert.push(command.args[0]);\n    } else {\n        // The command already exist\n    }\n}\nif (unCovert.length > 0) {\n    throw new Error(\n            `Not all commands covert  \n             Covert ${covert.length} / Expected ${commands.length} \n             Covert commands: ${covert}\n             Uncovert commands: ${unCovert}\n             Duplicated commands: ${duplicated}`);\n}\nif (duplicated.length > 0) {\n    throw new Error(`Duplicated commands: ${duplicated}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6a770dc9-e7ed-4394-ad85-f2d75c464af8",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "1370d1e8-7e20-4511-bee5-5edacfd1161d",
          "39edb80d-3a2e-4f09-b0ad-11b29fb8d9c4",
          "0157cfcf-5585-4295-9a08-3da79012657e",
          "e272b844-bf04-42e7-a26e-60f20ba56bb7",
          "345a0837-c5cf-4284-882f-8277b9bc1dcb",
          "e3930f69-107d-40d6-acb8-4fbce63ffc31",
          "ad29ec78-5baa-4e3e-a868-ae5d438b62af",
          "0e34930e-6ae8-4539-bc4c-27ea50b51352",
          "fb763c85-3651-48f8-bede-21bb590720f6",
          "494766fd-0d0f-40a7-9297-352a6ea2729a",
          "451a5d12-a811-49fa-8b16-a9519bf788f4",
          "70273224-e43a-4d71-b33f-2f924fa3c8a7",
          "f2bf8c2a-4e02-4a06-84e3-3b7322241618",
          "b06dce11-5877-492b-a980-00386db5c9fe",
          "b0ab5d82-4a55-4612-8ab2-b1f014438a8c",
          "902411bc-f7a4-4f37-a9c2-6d5f4f253a9b",
          "cdede961-46e8-46ab-b096-8df412e2e143",
          "6a675a4a-be69-4593-a49b-e0467b193324",
          "01b0a232-edb8-4d8e-935d-1df51b9dd26c",
          "2814f0d4-44ae-40c5-919a-12bbc6b93a73",
          "e31a0252-9c50-4533-b0c1-b751f47c9a98",
          "918f6195-1383-4159-8baf-c5bb910596d4",
          "56f87984-52c9-493b-a267-7947fe9682a0",
          "db824da5-8581-4078-8677-c89106732845",
          "ce574cdc-3e20-44e0-bf66-cc7bced921c2",
          "c8a7bf77-166f-468e-b341-18c3195d1a5f",
          "6a770dc9-e7ed-4394-ad85-f2d75c464af8"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 96713,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}