{
  "stats": {
    "suites": 1,
    "tests": 27,
    "passes": 26,
    "pending": 0,
    "failures": 1,
    "start": "2018-05-30T21:09:35.063Z",
    "end": "2018-05-30T21:12:47.651Z",
    "duration": 192588,
    "testsRegistered": 27,
    "passPercent": 96.3,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "4af3eab8-1fc9-41d0-aec8-10ae99be16f4",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "0258ca22-f65d-48e6-ab73-7633a0fe809a",
        "title": "General functional tests",
        "fullFile": "C:\\Development\\NodeJS\\EncryptionNodeJS\\Apps\\Miner\\test\\functional-test\\generalTest.js",
        "file": "\\generalTest.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "General functional tests \"before all\" hook",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "modFs.readdirSync('./units/').forEach(file => {\n    modFs.unlinkSync(`./units/${file}`);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "a1ec725a-a28e-4a40-a345-b541c267b1fd",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Check is operator Valid",
            "fullTitle": "General functional tests Check is operator Valid",
            "timedOut": false,
            "duration": 536,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var operatorExecutor = child_process.spawnSync(node, [operatorApp, \"-ver\"], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = operatorExecutor.stdout.toString();\nif (data.length === 0) {\n    throw new Error(\"Operator application is not valid\");\n}",
            "err": {},
            "isRoot": false,
            "uuid": "c0627c4f-207d-4c12-abf0-4a7eb5802688",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -ver",
            "fullTitle": "General functional tests Check properly executon of -ver",
            "timedOut": false,
            "duration": 541,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-ver\\\"],\\\"expected\\\":\\\"Copyright (c) 2018, Mihail Maldzhanski <pollarize@gmail.com>\\\\nDICE Money <www.dice.money> - Miner Application Version[1.48] - 30.05.2018\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"Copyright (c) 2018, Mihail Maldzhanski <pollarize@gmail.com>\\nDICE Money <www.dice.money> - Miner Application Version[1.48] - 30.05.2018\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "536cf974-4bb8-4ea0-abd9-2a22a8500045",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -h",
            "fullTitle": "General functional tests Check properly executon of -h",
            "timedOut": false,
            "duration": 545,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-h\\\"],\\\"expected\\\":\\\"Copyright (c) 2018, Mihail Maldzhanski <pollarize@gmail.com>\\\\nDICE Money <www.dice.money> - Miner Application Version[1.48] - 30.05.2018\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\\nCopyright (c) 2018, Mihail Maldzhanski <pollarize@gmail.com>\\nDICE Money <www.dice.money> - Miner Application Version[1.48] - 30.05.2018\\n\\n  -cCfg,--createConfiguration\\n     Create Configuration of the current owner.\\n     Usage: <application> <-cCfg or --createConfiguration> <nameOfOwner> <keyPair> <configurationFile>\\n\\n  -uCfg,--updateConfiguration\\n     Update Configuration of the current owner.(Do not delete existing contacts and operators!)\\n     Usage: <application> <-uCfg or --updateConfiguration> <nameOfOwner> <keyPair> <configurationFile>\\n\\n  -iCfg,--importConfiguration\\n     Import external configration file.\\n     Usage: <application> <-iCfg or --importConfiguration> <externalConfigurationFile> <configurationFile>\\n\\n  -aC,--addContact\\n     Add new Contact in configuration file.\\n     Usage: <application> <-aC or --addContact> <nameOfContact> <digitalAddrOfContact> <configurationFile>\\n\\n  -aO,--addOperator\\n     Add new Operator in configration file.\\n     Usage: <application> <-aO or --addOperator> <nameOfOperator> <digitalAddrOfOperator> <configurationFile>\\n\\n  -eAc,--exportAllContacts\\n     Export all Contacts from local configuration file.\\n     Usage: <application> <-eAc or --exportAllContacts> <externalConfigurationFile> <configurationFile>\\n\\n  -eAo,--exportAllOperators\\n     Export all Operators from local configration file.\\n     Usage: <application> <-eAo or --exportAllOperators> <externalConfigurationFile> <configurationFile>\\n\\n  -lO,--listOperators\\n     List all Operators in confgiration file.\\n     Usage: <application> <-lO or --listOperators> <configurationFile>\\n\\n  -lC,--listContacts\\n     List all Contacts in confgiration file.\\n     Usage: <application> <-lC or --listContacts> <configurationFile>\\n\\n  -eK,--exportKeys\\n     Export keys saved in configuration file.\\n     Usage: <application> <-eK or --exportKeys> <fileOutput> <configurationFile>\\n\\n  -pD,--printDigitalAddress\\n     Print Digital Address from configuration file.\\n     Usage: <application> <-pD or --printDigitalAddress> <configurationFile>\\n\\n  -pN,--printName\\n     Print Name from configuration file.\\n     Usage: <application> <-pN or --printName> <configurationFile>\\n\\n  -lGO,--listGlobalOperators\\n     List all Global Operators.\\n     Usage: <application> <-lGO or --listGlobalOperators> <>\\n\\n  -uDns,--updateDnsBinder\\n     Downaload latest version of dns binder file.\\n     Usage: <application> <-uDns or --updateDnsBinder> <>\\n\\n  -b,--balance\\n     Calculate current balance of DICE in specified folder.\\n     Usage: <application> <-b or --balance> <folderWithUnits> <keyPair>\\n\\n  -lU,--listUnits\\n     List all units in specific folder with current value, owner and operator.\\n     Usage: <application> <-lU or --listUnits> <folderWithUnits> <keyPair>\\n\\n  -v,--validate\\n     Exports content from Base58 saved unit and value of the unit\\n     Usage: <application> <-v or --validate> <diceUnit> <keyPair>\\n\\n  -k,--keygen\\n     Generate new KeyPair of Digital Address and Private Key\\n     Usage: <application> <-k or --keygen> <fileOutput>\\n\\n  -to,--tradeOwnerless\\n     Trade ownerless dice unit\\n     Usage: <application> <-to or --tradeOwnerless> <diceUnit> <keyPair>\\n\\n  -tc,--tradeCurrent\\n     Trade current owner of unit \\n     Usage: <application> <-tc or --tradeCurrent> <diceUnit> <fileOutput> <addrMin> <keyPair>\\n\\n  -tn,--tradeNew\\n     Trade request from new owner (for ownerless unit or traded unit)\\n     Usage: <application> <-tn or --tradeNew> <diceUnit> <fileOutput> <keyPair>\\n\\n  -cc,--calculateCuda\\n     Calculate new DICE Unit by using CUDA accelerated application\\n     Usage: <application> <-cc or --calculateCuda> <fileOutput> <addrOp> <specificUnitValue> <keyPair>\\n\\n  -r,--register\\n     Send prototype to operator to register it in its DB.\\n     Usage: <application> <-r or --register> <diceUnit> <keyPair>\\n\\n  -ver,--version\\n     Prints application current version\\n     Usage: <application> <-ver or --version> <>\\n\\n  -h,--help\\n     Print Following list\\n     Usage: <application> <-h or --help> <>\\n\\n\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "9454c2c3-02bd-4763-9362-7ad6c260ca7f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -uDns",
            "fullTitle": "General functional tests Check properly executon of -uDns",
            "timedOut": false,
            "duration": 1433,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-uDns\\\"],\\\"expected\\\":\\\"UsInf0089\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0089\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5b3aeabf-dfd5-4ef5-9699-422807b4318b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -lGO",
            "fullTitle": "General functional tests Check properly executon of -lGO",
            "timedOut": false,
            "duration": 557,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-lGO\\\"],\\\"expected\\\":\\\"UsInf0054\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"1. d8f54-4fe68-98060-78b6d-bbbf3-1908b-473de-ed2b2 - Orange Pi Zero - Allwinner H2+ - 256MB RAM - 4GB ROM\\n2. 11f18-19ec1-b4e42-c96de-906fc-86fd6-d64e4-ed409 - Neo Pi Neo Plus 2 - Allwinner H5(64 bit) - 1024MB RAM - 8GB ROM - Sofia\\n3. 58b4b-cfd09-290eb-0ad2f-c6077-c2f0d-fa940-0f4d4 - Neo Pi Neo Plus 2 - Allwinner H5(64 bit) - 1024MB RAM - 8GB ROM - London\\n4. 76640-bcfe5-47604-75a2e-c0a6c-90df2-c39ef-97718 - undefined\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b18ad599-426e-4ecd-a272-5730151d41ea",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -k",
            "fullTitle": "General functional tests Check properly executon of -k",
            "timedOut": false,
            "duration": 572,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-k\\\",\\\"testKey\\\"],\\\"expected\\\":\\\"UsInf0053\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0053\\nUsInf0059  :  2X9roQ3ASMDXHt5EP7hrYLCpbeiP\\nUsInf0060  :  ec22b-60dd8-6fdb3-273c0-5f8e7-daad2-2e1cb-d46f7\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "98507eb4-c09c-4459-9fc7-60a723071e7e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -cCfg",
            "fullTitle": "General functional tests Check properly executon of -cCfg",
            "timedOut": false,
            "duration": 560,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-cCfg\\\",\\\"Mihail Maldzhanski\\\",\\\"testkey.dkeys\\\",\\\"testCfg\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "3a668cfb-90be-48c1-b3e9-4a77e11233b0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -uCfg",
            "fullTitle": "General functional tests Check properly executon of -uCfg",
            "timedOut": false,
            "duration": 558,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-uCfg\\\",\\\"Mihail Maldzhanski New\\\",\\\"testkey.dkeys\\\",\\\"testCfg\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "10c5ef61-aed5-41c9-93f4-1c827e883265",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -iCfg",
            "fullTitle": "General functional tests Check properly executon of -iCfg",
            "timedOut": false,
            "duration": 557,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-iCfg\\\",\\\"../../contactsInit.dbook\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "0a38befc-1660-468c-bb7d-19cfd700f530",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -aC",
            "fullTitle": "General functional tests Check properly executon of -aC",
            "timedOut": false,
            "duration": 533,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-aC\\\",\\\"Tester Name\\\",\\\"3f2b9-2f458-f2066-26c65-ea67c-a6b48-86ced-e9dc6\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "f34f226f-3876-4e0f-97d9-00893f398769",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -aO",
            "fullTitle": "General functional tests Check properly executon of -aO",
            "timedOut": false,
            "duration": 547,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-aO\\\",\\\"Tester Operator\\\",\\\"3f2b9-2f458-f2066-26c65-ea67c-a6b48-86ced-e9dc6\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "29b28a77-dcfe-4a6c-8900-a7ef5ff1bc60",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -lO",
            "fullTitle": "General functional tests Check properly executon of -lO",
            "timedOut": false,
            "duration": 546,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-lO\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"Name: OpiZero Digital Address: d8f54-4fe68-98060-78b6d-bbbf3-1908b-473de-ed2b2 \\nName: NeoPiPlus2 Digital Address: 11f18-19ec1-b4e42-c96de-906fc-86fd6-d64e4-ed409 \\nName: Tester Operator Digital Address: 3f2b9-2f458-f2066-26c65-ea67c-a6b48-86ced-e9dc6 \\n\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "61bd5fca-10fe-47ea-b009-6d697ab58d80",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -lC",
            "fullTitle": "General functional tests Check properly executon of -lC",
            "timedOut": false,
            "duration": 537,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-lC\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"Name: Mihail Maldzhanski Digital Address: f87b0-31850-b97f9-835c9-9cb13-f91ce-43832-8537c \\nName: Tester Name Digital Address: 3f2b9-2f458-f2066-26c65-ea67c-a6b48-86ced-e9dc6 \\n\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e0a11aa6-e05a-4265-b8b7-c773e5f0f2bc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -pN",
            "fullTitle": "General functional tests Check properly executon of -pN",
            "timedOut": false,
            "duration": 559,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-pN\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"Mihail Maldzhanski New\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "82935f0e-a161-4a14-9a5f-a846019d72ea",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -pD",
            "fullTitle": "General functional tests Check properly executon of -pD",
            "timedOut": false,
            "duration": 546,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-pD\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"ec22b-60dd8-6fdb3-273c0-5f8e7-daad2-2e1cb-d46f7\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "1750f97a-d7f4-438e-988c-bda3970cf359",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -eAc",
            "fullTitle": "General functional tests Check properly executon of -eAc",
            "timedOut": false,
            "duration": 624,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-eAc\\\",\\\"exportedContacts\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "cfd0271b-997c-4b16-abc4-9a7377e69146",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -eAo",
            "fullTitle": "General functional tests Check properly executon of -eAo",
            "timedOut": false,
            "duration": 551,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-eAo\\\",\\\"exportedOperators\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "eac8fbe5-a106-4f16-bfa3-c46f6e14f223",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -eK",
            "fullTitle": "General functional tests Check properly executon of -eK",
            "timedOut": false,
            "duration": 657,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-eK\\\",\\\"exportedKeys\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "3eda95cb-00b9-4605-a14b-bb7a4b20b7cf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -cc",
            "fullTitle": "General functional tests Check properly executon of -cc",
            "timedOut": false,
            "duration": 157146,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-cc\\\",\\\"./units/testUnit\\\",\\\"d8f54-4fe68-98060-78b6d-bbbf3-1908b-473de-ed2b2\\\"],\\\"expected\\\":\\\"UsInf0073\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0056  :  30\\nCUDA Devices: \\r\\n\\r\\nNBody.GPU\\r\\n=========\\r\\n\\r\\n\\nCUDA version:   v9000\\r\\n\\n0: GeForce GTX 1050: 6.1\\r\\n  Global memory:   4096mb\\r\\n  Shared memory:   48kb\\r\\n  Constant memory: 64kb\\r\\n  Block registers: 65536\\r\\n\\r\\n  Warp size:         32\\r\\n  Threads per block: 1024\\r\\n  Multiprocessors: 5\\r\\n\\n  Threads per multiprocessor: 2048\\r\\n  Concurrent kernels: 1\\r\\n  Max block dimensions: [ 1024, 1024, 64 ]\\r\\n  Max grid dimensions:  [ 2147483647, 65535, 65535 ]\\r\\n\\r\\n\\nCUDA DICE Calculator has been started\\r\\nBlocks: 5120 Threads per block: 64 Total Threads: 327680 \\r\\nOperations per second: 15400960 / s\\r\\nEstimated time for generation (max): 69 s\\r\\n\\nUsInf0065  :  155287\\nTime used: 155 s\\r\\n\\nUsInf0052  :  2/1024\\nUsInf0057  :  ./units/testUnit\\nUsInf0067\\nUsInf0068  :  UsInf0073\\nUsInf0069  :  \\nUsInf0070  :  2/1024\\nUsInf0071  :  65a0f2f5c05a154817aa68847b09b9625a8b77f1bec703781ff7ba950f79a3756a270ec9e75cccb8f62515c19a821b7c623fcb54889044799bf9461980000000\\nUsInf0072\\nUsInf0071  :  65a0f2f5c05a154817aa68847b09b9625a8b77f1bec703781ff7ba950f79a3756a270ec9e75cccb8f62515c19a821b7c623fcb54889044799bf9461980000000\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {
              "message": "Error: Timeout of 120000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Development\\NodeJS\\EncryptionNodeJS\\Apps\\Miner\\test\\functional-test\\generalTest.js)",
              "estack": "Error: Timeout of 120000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Development\\NodeJS\\EncryptionNodeJS\\Apps\\Miner\\test\\functional-test\\generalTest.js)"
            },
            "isRoot": false,
            "uuid": "dc9bf59b-48c8-4811-8b10-9ab589309ef3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -v",
            "fullTitle": "General functional tests Check properly executon of -v",
            "timedOut": false,
            "duration": 1117,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-v\\\",\\\"./units/testUnit.dice\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0061\\nUsInf0062  :  d8f544fe689806078b6dbbbf31908b473deed2b2\\nUsInf0063  :  ec22b60dd86fdb3273c05f8e7daad22e1cbd46f7\\nUsInf0064  :  1e\\nUsInf0065  :  00610764\\nUsInf0066  :  d112f4e70597c4f269be8b0893943c1ee22220b6d4dd4434e3d09e7d41efb6ed0b6080ef6851bb2daf591ae31ef99566a750f10524f37c628b53e5372c5fabc4aae428ec3f4f5f20fca98df95fe0eb6525ddf4\\nUsInf0052  :  2/1024\\nUsInf0071  :  65a0f2f5c05a154817aa68847b09b9625a8b77f1bec703781ff7ba950f79a3756a270ec9e75cccb8f62515c19a821b7c623fcb54889044799bf9461980000000\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "1b858114-a25c-4403-949e-5bb212ee065d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -to",
            "fullTitle": "General functional tests Check properly executon of -to",
            "timedOut": false,
            "duration": 1302,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-to\\\",\\\"./units/testUnit.dice\\\"],\\\"expected\\\":\\\"UsInf0075\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0067\\nUsInf0068  :  UsInf0075\\nUsInf0069  :  \\nUsInf0070  :  2/1024\\nUsInf0071  :  65a0f2f5c05a154817aa68847b09b9625a8b77f1bec703781ff7ba950f79a3756a270ec9e75cccb8f62515c19a821b7c623fcb54889044799bf9461980000000\\nUsInf0072\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fb494405-25eb-496e-96ba-efda1ff24049",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -r",
            "fullTitle": "General functional tests Check properly executon of -r",
            "timedOut": false,
            "duration": 1611,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-r\\\",\\\"./units/testUnit.dice\\\"],\\\"expected\\\":\\\"Warn0028\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0052  :  2/1024\\nUsInf0067\\nUsInf0068  :  Warn0028\\nUsInf0069  :  \\nUsInf0070  :  2/1024\\nUsInf0071  :  65a0f2f5c05a154817aa68847b09b9625a8b77f1bec703781ff7ba950f79a3756a270ec9e75cccb8f62515c19a821b7c623fcb54889044799bf9461980000000\\nUsInf0072\\nUsInf0071  :  65a0f2f5c05a154817aa68847b09b9625a8b77f1bec703781ff7ba950f79a3756a270ec9e75cccb8f62515c19a821b7c623fcb54889044799bf9461980000000\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "8d5fed5a-1d6c-4383-9414-b1133459a914",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -tn",
            "fullTitle": "General functional tests Check properly executon of -tn",
            "timedOut": false,
            "duration": 1393,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-tn\\\",\\\"./units/testUnit.dice\\\",\\\"./units/testUnit.dice\\\"],\\\"expected\\\":\\\"UsInf0076\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0067\\nUsInf0068  :  UsInf0076\\nUsInf0069  :  ec22b-60dd8-6fdb3-273c0-5f8e7-daad2-2e1cb-d46f7\\nUsInf0070  :  2/1024\\nUsInf0071  :  65a0f2f5c05a154817aa68847b09b9625a8b77f1bec703781ff7ba950f79a3756a270ec9e75cccb8f62515c19a821b7c623fcb54889044799bf9461980000000\\nUsInf0072\\nUsInf0057  :  ./units/testUnit.dice\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "1d7eb6d9-7e6e-44e8-b542-1fbf22ed07be",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -b",
            "fullTitle": "General functional tests Check properly executon of -b",
            "timedOut": false,
            "duration": 1674,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-b\\\",\\\"./units/\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0090  :  0.00390625\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "33718960-2350-431a-95a8-e053fb2c0da5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -lU",
            "fullTitle": "General functional tests Check properly executon of -lU",
            "timedOut": false,
            "duration": 1527,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-lU\\\",\\\"./units/\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"1 # ./units//testUnit.dice # d8f54-4fe68-98060-78b6d-bbbf3-1908b-473de-ed2b2 # ec22b-60dd8-6fdb3-273c0-5f8e7-daad2-2e1cb-d46f7 # 0.001953125\\n2 # ./units//testUnit.dice.dice # d8f54-4fe68-98060-78b6d-bbbf3-1908b-473de-ed2b2 # ec22b-60dd8-6fdb3-273c0-5f8e7-daad2-2e1cb-d46f7 # 0.001953125\\nUsInf0090  :  0.00390625\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "c29f75c7-e07b-4c65-b3c1-d5dd2c5354e6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -tc",
            "fullTitle": "General functional tests Check properly executon of -tc",
            "timedOut": false,
            "duration": 1329,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-tc\\\",\\\"./units/testUnit.dice\\\",\\\"./units/encrypted\\\",\\\"d8f54-4fe68-98060-78b6d-bbbf3-1908b-473de-ed2b2\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0067\\nUsInf0068  :  UsInf0075\\nUsInf0069  :  ec22b-60dd8-6fdb3-273c0-5f8e7-daad2-2e1cb-d46f7\\nUsInf0070  :  2/1024\\nUsInf0071  :  65a0f2f5c05a154817aa68847b09b9625a8b77f1bec703781ff7ba950f79a3756a270ec9e75cccb8f62515c19a821b7c623fcb54889044799bf9461980000000\\nUsInf0072\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.spawnSync(node, [minerApp, ...test.args], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = minerAppExecVersion.stdout.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fdeb1d95-8250-4d7c-bb59-adf237154b30",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check is all commands covert",
            "fullTitle": "General functional tests Check is all commands covert",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var covert = [];\nvar unCovert = [];\nvar duplicated = [];\nfor (let command of commands) {\n    for (let test of generalTest) {\n        if (command.args[0] === test.args[0]) {\n            if (covert.indexOf(command.args[0]) === -1) {\n                covert.push(command.args[0]);\n            } else {\n                duplicated.push(command.args[0]);\n            }\n        }\n    }\n    if (unCovert.indexOf(command.args[0]) === -1 &&\n            covert.indexOf(command.args[0]) === -1) {\n        unCovert.push(command.args[0]);\n    } else {\n        // The command already exist\n    }\n}\nif (unCovert.length > 0) {\n    throw new Error(\n            `Not all commands covert  \n             Covert ${covert.length} / Expected ${commands.length} \n             Covert commands: ${covert}\n             Uncovert commands: ${unCovert}\n             Duplicated commands: ${duplicated}`);\n}\nif (duplicated.length > 0) {\n    throw new Error(`Duplicated commands: ${duplicated}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "1d86e629-b88b-405f-af28-472e3b35ad12",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "c0627c4f-207d-4c12-abf0-4a7eb5802688",
          "536cf974-4bb8-4ea0-abd9-2a22a8500045",
          "9454c2c3-02bd-4763-9362-7ad6c260ca7f",
          "5b3aeabf-dfd5-4ef5-9699-422807b4318b",
          "b18ad599-426e-4ecd-a272-5730151d41ea",
          "98507eb4-c09c-4459-9fc7-60a723071e7e",
          "3a668cfb-90be-48c1-b3e9-4a77e11233b0",
          "10c5ef61-aed5-41c9-93f4-1c827e883265",
          "0a38befc-1660-468c-bb7d-19cfd700f530",
          "f34f226f-3876-4e0f-97d9-00893f398769",
          "29b28a77-dcfe-4a6c-8900-a7ef5ff1bc60",
          "61bd5fca-10fe-47ea-b009-6d697ab58d80",
          "e0a11aa6-e05a-4265-b8b7-c773e5f0f2bc",
          "82935f0e-a161-4a14-9a5f-a846019d72ea",
          "1750f97a-d7f4-438e-988c-bda3970cf359",
          "cfd0271b-997c-4b16-abc4-9a7377e69146",
          "eac8fbe5-a106-4f16-bfa3-c46f6e14f223",
          "3eda95cb-00b9-4605-a14b-bb7a4b20b7cf",
          "1b858114-a25c-4403-949e-5bb212ee065d",
          "fb494405-25eb-496e-96ba-efda1ff24049",
          "8d5fed5a-1d6c-4383-9414-b1133459a914",
          "1d7eb6d9-7e6e-44e8-b542-1fbf22ed07be",
          "33718960-2350-431a-95a8-e053fb2c0da5",
          "c29f75c7-e07b-4c65-b3c1-d5dd2c5354e6",
          "fdeb1d95-8250-4d7c-bb59-adf237154b30",
          "1d86e629-b88b-405f-af28-472e3b35ad12"
        ],
        "failures": [
          "dc9bf59b-48c8-4811-8b10-9ab589309ef3"
        ],
        "pending": [],
        "skipped": [],
        "duration": 178058,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}