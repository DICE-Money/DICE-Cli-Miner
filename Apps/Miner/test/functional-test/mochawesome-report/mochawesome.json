{
  "stats": {
    "suites": 1,
    "tests": 27,
    "passes": 27,
    "pending": 0,
    "failures": 0,
    "start": "2018-06-06T17:02:31.375Z",
    "end": "2018-06-06T17:04:04.081Z",
    "duration": 92706,
    "testsRegistered": 27,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "3b102bf9-bcea-4426-9812-7367e48c7d90",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "84260591-9732-4ed1-a874-6b904def3533",
        "title": "General functional tests",
        "fullFile": "C:\\Development\\NodeJS\\EncryptionNodeJS\\Apps\\Miner\\test\\functional-test\\generalTestBinary.js",
        "file": "\\generalTestBinary.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "General functional tests \"before all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "modFs.readdirSync('./units/').forEach(file => {\n    modFs.unlinkSync(`./units/${file}`);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "b2ef773e-7b7a-4e4d-89e4-c2cdebbbae8c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Check is operator Valid",
            "fullTitle": "General functional tests Check is operator Valid",
            "timedOut": false,
            "duration": 758,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var operatorExecutor = child_process.execFileSync(operatorApp,[\"-ver\"], {stdio: ['pipe', 'pipe', 'pipe']});\nvar data = operatorExecutor.toString();\nif (data.length === 0) {\n    throw new Error(\"Operator application is not valid\");\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e187e060-9d86-46d5-bd8a-5e53f9788306",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -ver",
            "fullTitle": "General functional tests Check properly executon of -ver",
            "timedOut": false,
            "duration": 589,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-ver\\\"],\\\"expected\\\":\\\"DICE Money <www.dice.money> - Miner Application Version[1.49 Patch 1] - 05.06.2018 \\\\nWritten by Mihail Maldzhanski <pollarize@gmail.com>\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"DICE Money <www.dice.money> - Miner Application Version[1.49 Patch 1] - 05.06.2018 \\nWritten by Mihail Maldzhanski <pollarize@gmail.com>\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "8dcc2154-7be7-42f6-90a3-2b6c33487d6d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -h",
            "fullTitle": "General functional tests Check properly executon of -h",
            "timedOut": false,
            "duration": 571,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-h\\\"],\\\"expected\\\":\\\"DICE Money <www.dice.money> - Miner Application Version[1.49 Patch 1] - 05.06.2018 \\\\nWritten by Mihail Maldzhanski <pollarize@gmail.com>\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\\nDICE Money <www.dice.money> - Miner Application Version[1.49 Patch 1] - 05.06.2018 \\nWritten by Mihail Maldzhanski <pollarize@gmail.com>\\n\\n  -cCfg,--createConfiguration\\n     Create Configuration of the current owner.\\n     Usage: <application> <-cCfg or --createConfiguration> <nameOfOwner> <keyPair> <configurationFile>\\n\\n  -uCfg,--updateConfiguration\\n     Update Configuration of the current owner.(Do not delete existing contacts and operators!)\\n     Usage: <application> <-uCfg or --updateConfiguration> <nameOfOwner> <keyPair> <configurationFile>\\n\\n  -iCfg,--importConfiguration\\n     Import external configration file.\\n     Usage: <application> <-iCfg or --importConfiguration> <externalConfigurationFile> <configurationFile>\\n\\n  -aC,--addContact\\n     Add new Contact in configuration file.\\n     Usage: <application> <-aC or --addContact> <nameOfContact> <digitalAddrOfContact> <configurationFile>\\n\\n  -aO,--addOperator\\n     Add new Operator in configration file.\\n     Usage: <application> <-aO or --addOperator> <nameOfOperator> <digitalAddrOfOperator> <configurationFile>\\n\\n  -eAc,--exportAllContacts\\n     Export all Contacts from local configuration file.\\n     Usage: <application> <-eAc or --exportAllContacts> <externalConfigurationFile> <configurationFile>\\n\\n  -eAo,--exportAllOperators\\n     Export all Operators from local configration file.\\n     Usage: <application> <-eAo or --exportAllOperators> <externalConfigurationFile> <configurationFile>\\n\\n  -lO,--listOperators\\n     List all Operators in confgiration file.\\n     Usage: <application> <-lO or --listOperators> <configurationFile>\\n\\n  -lC,--listContacts\\n     List all Contacts in confgiration file.\\n     Usage: <application> <-lC or --listContacts> <configurationFile>\\n\\n  -eK,--exportKeys\\n     Export keys saved in configuration file.\\n     Usage: <application> <-eK or --exportKeys> <fileOutput> <configurationFile>\\n\\n  -pD,--printDigitalAddress\\n     Print Digital Address from configuration file.\\n     Usage: <application> <-pD or --printDigitalAddress> <configurationFile>\\n\\n  -pN,--printName\\n     Print Name from configuration file.\\n     Usage: <application> <-pN or --printName> <configurationFile>\\n\\n  -lGO,--listGlobalOperators\\n     List all Global Operators.\\n     Usage: <application> <-lGO or --listGlobalOperators> <>\\n\\n  -uDns,--updateDnsBinder\\n     Downaload latest version of dns binder file.\\n     Usage: <application> <-uDns or --updateDnsBinder> <>\\n\\n  -b,--balance\\n     Calculate current balance of DICE in specified folder.\\n     Usage: <application> <-b or --balance> <folderWithUnits> <keyPair>\\n\\n  -lU,--listUnits\\n     List all units in specific folder with current value, owner and operator.\\n     Usage: <application> <-lU or --listUnits> <folderWithUnits> <keyPair>\\n\\n  -v,--validate\\n     Exports content from Base58 saved unit and value of the unit\\n     Usage: <application> <-v or --validate> <diceUnit> <keyPair>\\n\\n  -k,--keygen\\n     Generate new KeyPair of Digital Address and Private Key\\n     Usage: <application> <-k or --keygen> <fileOutput>\\n\\n  -to,--tradeOwnerless\\n     Trade ownerless dice unit\\n     Usage: <application> <-to or --tradeOwnerless> <diceUnit> <keyPair>\\n\\n  -tc,--tradeCurrent\\n     Trade current owner of unit \\n     Usage: <application> <-tc or --tradeCurrent> <diceUnit> <fileOutput> <addrMin> <keyPair>\\n\\n  -tn,--tradeNew\\n     Trade request from new owner (for ownerless unit or traded unit)\\n     Usage: <application> <-tn or --tradeNew> <diceUnit> <fileOutput> <keyPair>\\n\\n  -cc,--calculateCuda\\n     Calculate new DICE Unit by using CUDA accelerated application\\n     Usage: <application> <-cc or --calculateCuda> <fileOutput> <addrOp> <specificUnitValue> <keyPair>\\n\\n  -r,--register\\n     Send prototype to operator to register it in its DB.\\n     Usage: <application> <-r or --register> <diceUnit> <keyPair>\\n\\n  -ver,--version\\n     Prints application current version\\n     Usage: <application> <-ver or --version> <>\\n\\n  -h,--help\\n     Print Following list\\n     Usage: <application> <-h or --help> <>\\n\\n\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6ef7b23e-c9c9-4a7a-a244-1138852b4a99",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -uDns",
            "fullTitle": "General functional tests Check properly executon of -uDns",
            "timedOut": false,
            "duration": 1432,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-uDns\\\"],\\\"expected\\\":\\\"UsInf0089\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0089\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fcc84764-1696-4835-a8cf-e3dd0b7ba11b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -lGO",
            "fullTitle": "General functional tests Check properly executon of -lGO",
            "timedOut": false,
            "duration": 697,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-lGO\\\"],\\\"expected\\\":\\\"UsInf0054\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"1. d8f54-4fe68-98060-78b6d-bbbf3-1908b-473de-ed2b2 - Test1 - Sofia (OpiZero H2+/256M/4G)\\n2. 11f18-19ec1-b4e42-c96de-906fc-86fd6-d64e4-ed409 - Test2 - Sofia (NeoPlus2 H5/1G/8G)\\n3. 58b4b-cfd09-290eb-0ad2f-c6077-c2f0d-fa940-0f4d4 - Test3 - London (NeoPlus2 H5/1G/8G)\\n4. 76640-bcfe5-47604-75a2e-c0a6c-90df2-c39ef-97718 - undefined\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "9182f03e-d8ea-4e19-b3b9-968fd427ebf3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -k",
            "fullTitle": "General functional tests Check properly executon of -k",
            "timedOut": false,
            "duration": 704,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-k\\\",\\\"testKey\\\"],\\\"expected\\\":\\\"UsInf0053\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0053\\nUsInf0059  :  3sS1Gns9GBEnrR9ZNCmAYrwxZpXX\\nUsInf0060  :  08e66-9f439-b0ef4-cfd63-a8d5f-2704b-4ed25-1bb8c\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fba693b8-fc30-43e1-b479-c38d16b7f258",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -cCfg",
            "fullTitle": "General functional tests Check properly executon of -cCfg",
            "timedOut": false,
            "duration": 635,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-cCfg\\\",\\\"Mihail Maldzhanski\\\",\\\"testkey.dkeys\\\",\\\"testCfg\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b6b45b6d-20aa-41c2-b982-69d7998b43ae",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -uCfg",
            "fullTitle": "General functional tests Check properly executon of -uCfg",
            "timedOut": false,
            "duration": 652,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-uCfg\\\",\\\"Mihail Maldzhanski New\\\",\\\"testkey.dkeys\\\",\\\"testCfg\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "38b94565-b7c3-43da-a71b-00ff888e1e3a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -iCfg",
            "fullTitle": "General functional tests Check properly executon of -iCfg",
            "timedOut": false,
            "duration": 609,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-iCfg\\\",\\\"../../contactsInit.dbook\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ae90ff8c-fc41-4eeb-bcac-8e99678af4f0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -aC",
            "fullTitle": "General functional tests Check properly executon of -aC",
            "timedOut": false,
            "duration": 623,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-aC\\\",\\\"Tester Name\\\",\\\"3f2b9-2f458-f2066-26c65-ea67c-a6b48-86ced-e9dc6\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "dacfa458-44ba-43b9-a7ee-0648ce478781",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -aO",
            "fullTitle": "General functional tests Check properly executon of -aO",
            "timedOut": false,
            "duration": 645,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-aO\\\",\\\"Tester Operator\\\",\\\"3f2b9-2f458-f2066-26c65-ea67c-a6b48-86ced-e9dc6\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "e0b6264a-1f25-4b63-a9ed-cfe874022a0a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -lO",
            "fullTitle": "General functional tests Check properly executon of -lO",
            "timedOut": false,
            "duration": 584,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-lO\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"Name: OpiZero Test Digital Address: d8f54-4fe68-98060-78b6d-bbbf3-1908b-473de-ed2b2 \\nName: DICE Sofia Digital Address: 11f18-19ec1-b4e42-c96de-906fc-86fd6-d64e4-ed409 \\nName: DICE London Digital Address: 58b4b-cfd09-290eb-0ad2f-c6077-c2f0d-fa940-0f4d4 \\nName: Tester Operator Digital Address: 3f2b9-2f458-f2066-26c65-ea67c-a6b48-86ced-e9dc6 \\n\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "f02fddc8-b9bb-48f1-9bb8-f495bc0ccb54",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -lC",
            "fullTitle": "General functional tests Check properly executon of -lC",
            "timedOut": false,
            "duration": 619,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-lC\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"Name: Mihail Maldzhanski Digital Address: f87b0-31850-b97f9-835c9-9cb13-f91ce-43832-8537c \\nName: Konstantin Dimitrov Digital Address: 221fe-81e55-ca8fa-f5518-01201-e4852-934b8-3ecc7 \\nName: Tester Name Digital Address: 3f2b9-2f458-f2066-26c65-ea67c-a6b48-86ced-e9dc6 \\n\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "6b2618ed-77f9-4d7a-bcb5-a0a5b190d89a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -pN",
            "fullTitle": "General functional tests Check properly executon of -pN",
            "timedOut": false,
            "duration": 624,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-pN\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"Mihail Maldzhanski New\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "fb2d259b-c817-43d6-b388-19051d59c054",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -pD",
            "fullTitle": "General functional tests Check properly executon of -pD",
            "timedOut": false,
            "duration": 622,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-pD\\\",\\\"defaultConfig.dconf\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"08e66-9f439-b0ef4-cfd63-a8d5f-2704b-4ed25-1bb8c\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5ad495d5-cb85-4b5d-854e-f2e59f70f5dc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -eAc",
            "fullTitle": "General functional tests Check properly executon of -eAc",
            "timedOut": false,
            "duration": 644,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-eAc\\\",\\\"exportedContacts\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "d7806ea3-f53c-48d1-87cd-bc7b0f6897c4",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -eAo",
            "fullTitle": "General functional tests Check properly executon of -eAo",
            "timedOut": false,
            "duration": 594,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-eAo\\\",\\\"exportedOperators\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "7dd6aa70-04ad-4321-b8fc-e2a619d2d4eb",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -eK",
            "fullTitle": "General functional tests Check properly executon of -eK",
            "timedOut": false,
            "duration": 607,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-eK\\\",\\\"exportedKeys\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "c51061bf-b56e-47f0-a743-ec9bc099a2c6",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -cc",
            "fullTitle": "General functional tests Check properly executon of -cc",
            "timedOut": false,
            "duration": 74022,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-cc\\\",\\\"./units/testUnit\\\",\\\"76640-bcfe5-47604-75a2e-c0a6c-90df2-c39ef-97718\\\"],\\\"expected\\\":\\\"UsInf0073\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0056  :  30\\nCUDA Devices: \\r\\n\\r\\nNBody.GPU\\r\\n=========\\r\\n\\r\\n\\nCUDA version:   v9000\\r\\n\\n0: GeForce GTX 1050: 6.1\\r\\n  Global memory:   4096mb\\r\\n  Shared memory:   48kb\\r\\n  Constant memory: 64kb\\r\\n  Block registers: 65536\\r\\n\\r\\n  Warp size:         32\\r\\n  Threads per block: 1024\\r\\n  Multiprocessors: 5\\r\\n  Threads per multiprocessor: 2048\\r\\n  Concurrent kernels: 1\\r\\n  Max block dimensions: [ 1024, 1024, 64 ]\\r\\n\\n  Max grid dimensions:  [ 2147483647, 65535, 65535 ]\\r\\n\\r\\n\\nCUDA DICE Calculator has been started\\r\\nBlocks: 5120 Threads per block: 64 Total Threads: 327680 \\r\\nOperations per second: 14745600 / s\\r\\nEstimated time for generation (max): 72 s\\r\\n\\nUsInf0065  :  73050\\nTime used: 72 s\\r\\n\\nUsInf0052  :  2/1024\\nUsInf0057  :  ./units/testUnit\\nUsInf0067\\nUsInf0068  :  UsInf0073\\nUsInf0069  :  08e66-9f439-b0ef4-cfd63-a8d5f-2704b-4ed25-1bb8c\\nUsInf0070  :  2/1024\\nUsInf0071  :  80968dbab9a175f3fb918f27ae56a9cbb352caf9b17e709cc88ce314fcbdff3acd89d16f8f5cf674d85450695856e7fbb1e5e5869caf3435762c18cf80000000\\nUsInf0072\\nUsInf0071  :  80968dbab9a175f3fb918f27ae56a9cbb352caf9b17e709cc88ce314fcbdff3acd89d16f8f5cf674d85450695856e7fbb1e5e5869caf3435762c18cf80000000\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "5e14b99a-ea3c-4f01-b548-64236e6bc3cf",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -v",
            "fullTitle": "General functional tests Check properly executon of -v",
            "timedOut": false,
            "duration": 939,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-v\\\",\\\"./units/testUnit.dice\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0061\\nUsInf0062  :  76640bcfe54760475a2ec0a6c90df2c39ef97718\\nUsInf0063  :  08e669f439b0ef4cfd63a8d5f2704b4ed251bb8c\\nUsInf0064  :  1e\\nUsInf0065  :  00612210\\nUsInf0066  :  ecd39bd933042860bac2453e97ef2cd7a74cbf6865506982435796ca5e1fe0208b48c8c50dfb0643f9881d818851244214f383f2f8c9b6c783a60a48405f8aca4c62e98bc9aca073aa3192569f64b0445626ac\\nUsInf0052  :  2/1024\\nUsInf0071  :  80968dbab9a175f3fb918f27ae56a9cbb352caf9b17e709cc88ce314fcbdff3acd89d16f8f5cf674d85450695856e7fbb1e5e5869caf3435762c18cf80000000\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "706329e4-ff0b-4eb6-bbec-1602a59ce855",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -to",
            "fullTitle": "General functional tests Check properly executon of -to",
            "timedOut": false,
            "duration": 915,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-to\\\",\\\"./units/testUnit.dice\\\"],\\\"expected\\\":\\\"UsInf0075\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0067\\nUsInf0068  :  UsInf0075\\nUsInf0069  :  \\nUsInf0070  :  2/1024\\nUsInf0071  :  80968dbab9a175f3fb918f27ae56a9cbb352caf9b17e709cc88ce314fcbdff3acd89d16f8f5cf674d85450695856e7fbb1e5e5869caf3435762c18cf80000000\\nUsInf0072\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ac8a9e66-765e-478c-9624-1fc062432c01",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -r",
            "fullTitle": "General functional tests Check properly executon of -r",
            "timedOut": false,
            "duration": 964,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-r\\\",\\\"./units/testUnit.dice\\\"],\\\"expected\\\":\\\"Warn0028\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0052  :  2/1024\\nUsInf0067\\nUsInf0068  :  Warn0028\\nUsInf0069  :  \\nUsInf0070  :  2/1024\\nUsInf0071  :  80968dbab9a175f3fb918f27ae56a9cbb352caf9b17e709cc88ce314fcbdff3acd89d16f8f5cf674d85450695856e7fbb1e5e5869caf3435762c18cf80000000\\nUsInf0072\\nUsInf0071  :  80968dbab9a175f3fb918f27ae56a9cbb352caf9b17e709cc88ce314fcbdff3acd89d16f8f5cf674d85450695856e7fbb1e5e5869caf3435762c18cf80000000\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "9491c11d-02bd-4051-99f2-e2e452b45aa2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -tn",
            "fullTitle": "General functional tests Check properly executon of -tn",
            "timedOut": false,
            "duration": 903,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-tn\\\",\\\"./units/testUnit.dice\\\",\\\"./units/testUnit.dice\\\"],\\\"expected\\\":\\\"UsInf0076\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0067\\nUsInf0068  :  UsInf0076\\nUsInf0069  :  08e66-9f439-b0ef4-cfd63-a8d5f-2704b-4ed25-1bb8c\\nUsInf0070  :  2/1024\\nUsInf0071  :  80968dbab9a175f3fb918f27ae56a9cbb352caf9b17e709cc88ce314fcbdff3acd89d16f8f5cf674d85450695856e7fbb1e5e5869caf3435762c18cf80000000\\nUsInf0072\\nUsInf0057  :  ./units/testUnit.dice\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "d7f296ae-9471-4108-abd2-40277dd64138",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -b",
            "fullTitle": "General functional tests Check properly executon of -b",
            "timedOut": false,
            "duration": 857,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-b\\\",\\\"./units/\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0090  :  0.00390625\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "b36e9ac6-84ce-43ad-8f6b-014411e7cf6a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -lU",
            "fullTitle": "General functional tests Check properly executon of -lU",
            "timedOut": false,
            "duration": 902,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-lU\\\",\\\"./units/\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"1 # ./units//testUnit.dice # 76640-bcfe5-47604-75a2e-c0a6c-90df2-c39ef-97718 # 08e66-9f439-b0ef4-cfd63-a8d5f-2704b-4ed25-1bb8c # 0.001953125\\n2 # ./units//testUnit.dice.dice # 76640-bcfe5-47604-75a2e-c0a6c-90df2-c39ef-97718 # 08e66-9f439-b0ef4-cfd63-a8d5f-2704b-4ed25-1bb8c # 0.001953125\\nUsInf0090  :  0.00390625\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "c3f4e42f-9a82-4743-a4f3-b07fea5b1813",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check properly executon of -tc",
            "fullTitle": "General functional tests Check properly executon of -tc",
            "timedOut": false,
            "duration": 911,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "context": "[\n  {\n    \"title\": \"Test specific values\",\n    \"value\": \"{\\\"args\\\":[\\\"-tc\\\",\\\"./units/testUnit.dice\\\",\\\"./units/encrypted\\\",\\\"d8f54-4fe68-98060-78b6d-bbbf3-1908b-473de-ed2b2\\\"],\\\"expected\\\":\\\"\\\",\\\"unExpected\\\":\\\"Err\\\"}\"\n  },\n  {\n    \"title\": \"Execution report\",\n    \"value\": \"UsInf0067\\nUsInf0068  :  UsInf0075\\nUsInf0069  :  08e66-9f439-b0ef4-cfd63-a8d5f-2704b-4ed25-1bb8c\\nUsInf0070  :  2/1024\\nUsInf0071  :  80968dbab9a175f3fb918f27ae56a9cbb352caf9b17e709cc88ce314fcbdff3acd89d16f8f5cf674d85450695856e7fbb1e5e5869caf3435762c18cf80000000\\nUsInf0072\\nUsInf0054\\n\"\n  }\n]",
            "code": "//Add test case variables\naddContext(this, {title: \"Test specific values\", value: JSON.stringify(test)});\n//Set user defined timeout\nthis.timeout(maxTimeOut);\n//Exec node\nvar minerAppExecVersion = child_process.execFileSync(minerApp, [ ...test.args], {stdio: ['pipe', 'pipe', 'pipe'],cwd:\"./\"});\nvar data = minerAppExecVersion.toString();\n//Add return data from execution\naddContext(this, {title: \"Execution report\", value: data});\n//Real tests\nif (test.expected !== '' && data.indexOf(test.expected) === -1) {\n    throw new Error(\"Expected: \" + test.expected);\n}\nif (test.unExpected !== '' && data.indexOf(test.unExpected) !== -1) {\n    throw new Error(\"Unxpected: \" + test.unExpected);\n}\nif (test.specificExec(data) !== true) {\n    throw new Error(`Specific execution failed on ${test.args[0]} with ${\"\\n\" + data}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "ddc651c2-2ae0-481d-bd41-b8d3640b6bfc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Check is all commands covert",
            "fullTitle": "General functional tests Check is all commands covert",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var covert = [];\nvar unCovert = [];\nvar duplicated = [];\nfor (let command of commands) {\n    for (let test of generalTest) {\n        if (command.args[0] === test.args[0]) {\n            if (covert.indexOf(command.args[0]) === -1) {\n                covert.push(command.args[0]);\n            } else {\n                duplicated.push(command.args[0]);\n            }\n        }\n    }\n    if (unCovert.indexOf(command.args[0]) === -1 &&\n            covert.indexOf(command.args[0]) === -1) {\n        unCovert.push(command.args[0]);\n    } else {\n        // The command already exist\n    }\n}\nif (unCovert.length > 0) {\n    throw new Error(\n            `Not all commands covert  \n             Covert ${covert.length} / Expected ${commands.length} \n             Covert commands: ${covert}\n             Uncovert commands: ${unCovert}\n             Duplicated commands: ${duplicated}`);\n}\nif (duplicated.length > 0) {\n    throw new Error(`Duplicated commands: ${duplicated}`);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "226c25ff-7158-406b-969c-f58461a5139c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e187e060-9d86-46d5-bd8a-5e53f9788306",
          "8dcc2154-7be7-42f6-90a3-2b6c33487d6d",
          "6ef7b23e-c9c9-4a7a-a244-1138852b4a99",
          "fcc84764-1696-4835-a8cf-e3dd0b7ba11b",
          "9182f03e-d8ea-4e19-b3b9-968fd427ebf3",
          "fba693b8-fc30-43e1-b479-c38d16b7f258",
          "b6b45b6d-20aa-41c2-b982-69d7998b43ae",
          "38b94565-b7c3-43da-a71b-00ff888e1e3a",
          "ae90ff8c-fc41-4eeb-bcac-8e99678af4f0",
          "dacfa458-44ba-43b9-a7ee-0648ce478781",
          "e0b6264a-1f25-4b63-a9ed-cfe874022a0a",
          "f02fddc8-b9bb-48f1-9bb8-f495bc0ccb54",
          "6b2618ed-77f9-4d7a-bcb5-a0a5b190d89a",
          "fb2d259b-c817-43d6-b388-19051d59c054",
          "5ad495d5-cb85-4b5d-854e-f2e59f70f5dc",
          "d7806ea3-f53c-48d1-87cd-bc7b0f6897c4",
          "7dd6aa70-04ad-4321-b8fc-e2a619d2d4eb",
          "c51061bf-b56e-47f0-a743-ec9bc099a2c6",
          "5e14b99a-ea3c-4f01-b548-64236e6bc3cf",
          "706329e4-ff0b-4eb6-bbec-1602a59ce855",
          "ac8a9e66-765e-478c-9624-1fc062432c01",
          "9491c11d-02bd-4051-99f2-e2e452b45aa2",
          "d7f296ae-9471-4108-abd2-40277dd64138",
          "b36e9ac6-84ce-43ad-8f6b-014411e7cf6a",
          "c3f4e42f-9a82-4743-a4f3-b07fea5b1813",
          "ddc651c2-2ae0-481d-bd41-b8d3640b6bfc",
          "226c25ff-7158-406b-969c-f58461a5139c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 92622,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}